<!DOCTYPE html>
<html>
<head>
  <title>Chat Page</title>
  <link rel="stylesheet" href="/css/chat.css"> <!-- Make sure the path is correct -->
  <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div class="container">
        <div class="nav-bar">
            <a>Chat</a>
            <!-- You can add functionality to close or go back here -->
            <div class="close">
                <div class="line one"></div>
                <div class="line two"></div>
            </div>
        </div>
        <div class="messages-area" id="messages">
            <!-- Messages will be dynamically inserted here -->
        </div>
        <div class="sender-area">
            <form id="form" action="">
                <div class="input-place">
                    <input placeholder="Send a message." class="send-input" autocomplete="off" id="input" type="text">
                    <div class="send" onclick="sendMessage()">
                      <img src="/css/pics/send.png" alt="Send Icon"> 
                  </div>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Assuming 'socket' is already connected
        socket.on('new private message', function(data) {
            // Assuming 'data' contains { content: "Message text", senderUsername: "Sender" }
            const messageArea = document.getElementById('messages'); // The container for messages
            
            // Create a new div element for the message
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            
            // Apply different styling if the message is from the current user
            if (data.senderUsername === '<%= username %>') {
                messageDiv.classList.add('my-message');
            } else {
                messageDiv.classList.add('other-message');
            }
            
            // Set the message text
            messageDiv.textContent = `${data.senderUsername}: ${data.content}`;
            
            // Append the new message to the messages area and scroll into view
            messageArea.appendChild(messageDiv);
            messageDiv.scrollIntoView({ behavior: 'smooth' });
        });
      </script>
          
    
</body>
</html>
